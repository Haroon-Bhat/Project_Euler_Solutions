#include <stdio.h>
#include <stdlib.h>

void main(int argc, char *argv[])
{
FILE *input;
input = fopen("./p059_cipher.txt", "r");

if( input == NULL )
	{
	printf("Unable to open expected input file ./p059_cipher.txt\nIs it missing?\n");
	return;
	}

//count characters
int commasInFile=0;
int bytesInFile;
char c;

do
	{
	c = getc(input);
	if( c == ',' )
		commasInFile++;
	} while ( c != EOF );

rewind(input);
bytesInFile = 1 + commasInFile;

//space to store the encrypted characters
int *data;
data = malloc(sizeof(int) * bytesInFile);

int n;
for( n=0; n<bytesInFile; n++ )
	{
	fscanf(input, "%d", &data[n]);
	getc(input);	//to get rid of the commas.
	}

printf("Got the data\n");
//print the data, just to check it was read ok.
for( n=0; n<bytesInFile; n++ )
	{
	printf("%4d", data[n]);
	if( (1+n)%10 == 0 )
		printf("\n");
	}
printf("\n");

//what are the ranges of printable ascii??
//[32..126]
//the password is 3 lowercase letters, range is [97..122]

int letter;
int clearByte;
int freq[128];
int key[3];
int ki;
for( ki=0; ki<3; ki++ )		//key index, for each letter in key
	{
	for( letter='a'; letter<='z'; letter++ )	//try each lowercase letter
		{
		//count occurrence of each deciphered ascii byte
		for( n=0; n<128; n++ )	
			freq[n]=0;
		//for letters encrypted with ki+1:th key byte
		for( n=ki; n<bytesInFile; n+=3 )
			{
			clearByte = data[n]^letter;
			if( clearByte < 32 || clearByte > 126 )
				break;
			freq[clearByte]++;
			}
		if( n>=bytesInFile )	//did we make it through the last loop without breaking?
			{
			//printf("%c might be a possible\n", letter);
				
			if( freq[' '] < bytesInFile / 20 )	//less than 5% space characters
				printf("key[%d]: %c Probably not right\n", ki, letter);
			else
				{
				printf("key[%d]: %c Likely right\n", ki, letter);
				key[ki] = letter;
				}		
			
			printf("Frequencies of common characters\n");
			for( n=0; n<128; n++ )
				{
				if( freq[n] > 6 )
					printf("'%c': %d\n", n, freq[n]);
				}
			
			}
		}
	}

//now decrypt the whole thing, printing it, and also, count the sum of original characters.
int sum=0;
int printNewline=0;
for( n=0; n<bytesInFile; n++ )
	{
	clearByte = data[n]^key[n%3];
	sum += clearByte;
	printf("%c", clearByte);
	
	if( (1+n)%70 == 0 )
		printNewline=1;
	if( clearByte == ' ' && printNewline == 1 )
		{
		printf("\n");
		printNewline=0;
		}
	}

printf("\n\nSum of clear characters %d\n", sum);

return;
}
